// ==UserScript==
// @name KanbanExpos√©
// @namespace http://tampermonkey.net/
// @version 1.9
// @description Kanban pour expos√©
// @author Yglsan
// @match *://*/*
// @grant GM_addStyle
// @grant GM_setValue
// @grant GM_getValue
// @grant GM_deleteValue
// @connect *
// @license GnuGPL 3.0
// ==/UserScript==

/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

(function() {
    'use strict';
    GM_addStyle(`
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --success-color: #27ae60;
            --danger-color: #e74c3c;
            --background-color: #ecf0f1;
            --text-color: #2c3e50;
            --border-radius: 10px;
            --box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }
        body {
            color: var(--text-color);
            background-color: var(--background-color);
        }
        #kanbanContainer {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 800px;
            max-width: 90vw;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            font-family: 'Segoe UI', system-ui, sans-serif;
            z-index: 10000;
            display: none;
            flex-direction: column;
            max-height: 90vh;
            cursor: move;
        }
        .kanban-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: var(--primary-color);
            color: white;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }
        .kanban-title {
            font-size: 1.5rem;
            font-weight: 600;
        }
        .kanban-controls {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }
        .control-button {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: var(--transition);
        }
        .control-button:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        .kanban-body {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
            padding: 1.5rem;
            overflow-y: auto;
            flex-grow: 1;
        }
        .kanban-column {
            background: var(--background-color);
            border-radius: var(--border-radius);
            padding: 1rem;
            min-height: 400px;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .column-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--primary-color);
        }
        .add-task-button {
            padding: 0.5rem 1rem;
            background: var(--secondary-color);
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .add-task-button:hover {
            background: #2980b9;
        }
        .kanban-task {
            background: white;
            padding: 1rem;
            border-radius: 6px;
            box-shadow: var(--box-shadow);
            cursor: grab;
            position: relative;
            transition: var(--transition);
            border-left: 4px solid transparent;
        }
        .kanban-task.dragging {
            opacity: 0.5;
            transform: rotate(3deg);
        }
        .task-content {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        .task-priority {
            font-size: 0.8em;
            padding: 0.2em 0.5em;
            border-radius: 4px;
            align-self: flex-start;
        }
        .priority-high {
            border-color: #e74c3c;
            background: #f9e2e2;
        }
        .priority-medium {
            border-color: #f1c40f;
            background: #fcf3cf;
        }
        .priority-low {
            border-color: #2ecc71;
            background: #e8f6ee;
        }
        .delete-task {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            cursor: pointer;
            opacity: 0;
            transition: var(--transition);
            color: var(--danger-color);
        }
        .kanban-task:hover .delete-task {
            opacity: 1;
        }
        #toggleKanban {
            position: fixed;
            bottom: 30px;
            right: 30px;
            padding: 1rem 1.5rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            box-shadow: var(--box-shadow);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            z-index: 9999;
        }
        .language-selector {
            position: relative;
        }
        .language-menu {
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 0.5rem;
            min-width: 150px;
            display: none;
            z-index: 10000;
            border: 1px solid var(--primary-color); /* Ajout d'une bordure */
        }
        .language-option {
            padding: 0.5rem;
            cursor: pointer;
            border-radius: 4px;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .language-option:hover {
            background: var(--background-color);
        }
        .size-button {
            padding: 0.5rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .size-button:hover {
            background: rgba(255, 255, 255, 0.2);
        }
    `);

    const translations = {
        en: {
            title: "Kanban Board",
            todo: "To Do",
            inProgress: "In Progress",
            done: "Done",
            addTask: "Add Task",
            export: "Export",
            import: "Import",
            language: "Language",
            delete: "Delete",
            confirmDelete: "Delete this task?",
            priority: "Priority",
            high: "High",
            medium: "Medium",
            low: "Low",
            cancel: "Cancel",
            save: "Save",
            resetConfirm: "Reset all tasks?",
            importError: "Invalid file format"
        },
        fr: {
            title: "Tableau Kanban",
            todo: "√Ä Faire",
            inProgress: "En Cours",
            done: "Termin√©",
            addTask: "Ajouter T√¢che",
            export: "Exporter",
            import: "Importer",
            language: "Langue",
            delete: "Supprimer",
            confirmDelete: "Supprimer cette t√¢che ?",
            priority: "Priorit√©",
            high: "Haute",
            medium: "Moyenne",
            low: "Basse",
            cancel: "Annuler",
            save: "Enregistrer",
            resetConfirm: "R√©initialiser toutes les t√¢ches ?",
            importError: "Format de fichier invalide"
        },
        // Ajoutez d'autres traductions ici...
    };

    let currentLanguage = 'fr'; // Langue par d√©faut
    let isVisible = false;

    // Cr√©ation de l'interface
    const kanbanHTML = `
        <div class="kanban-header">
            <div class="kanban-title">${translations[currentLanguage].title}</div>
            <div class="kanban-controls">
                <button class="control-button" id="exportBtn">
                    <span>‚Üì</span> ${translations[currentLanguage].export}
                </button>
                <button class="control-button" id="importBtn">
                    <span>‚Üë</span> ${translations[currentLanguage].import}
                </button>
                <div class="language-selector">
                    <button class="control-button" id="languageBtn">üåê ${translations[currentLanguage].language}</button>
                    <div class="language-menu">
                        ${Object.entries(translations).map(([code, lang]) =>
                            `<div class="language-option" data-lang="${code}"><img src="https://flagcdn.com/w20/${code}.png" alt="${code}" style="width: 20px; height: 20px;"> ${lang.title}</div>`
                        ).join('')}
                    </div>
                </div>
                <div class="size-selector">
                    <button class="size-button" data-size="small">üìè</button>
                    <button class="size-button" data-size="medium">üìê</button>
                    <button class="size-button" data-size="large">üìä</button>
                </div>
            </div>
        </div>
        <div class="kanban-body">
            <div class="kanban-column" id="todo">
                <div class="column-header">
                    <h3>${translations[currentLanguage].todo}</h3>
                    <button class="add-task-button">+ ${translations[currentLanguage].addTask}</button>
                </div>
            </div>
            <div class="kanban-column" id="inProgress">
                <div class="column-header">
                    <h3>${translations[currentLanguage].inProgress}</h3>
                    <button class="add-task-button">+ ${translations[currentLanguage].addTask}</button>
                </div>
            </div>
            <div class="kanban-column" id="done">
                <div class="column-header">
                    <h3>${translations[currentLanguage].done}</h3>
                    <button class="add-task-button">+ ${translations[currentLanguage].addTask}</button>
                </div>
            </div>
        </div>
    `;

    const container = document.createElement('div');
    container.id = 'kanbanContainer';
    container.innerHTML = kanbanHTML;
    document.body.appendChild(container);

    const toggleBtn = document.createElement('button');
    toggleBtn.id = 'toggleKanban';
    toggleBtn.textContent = translations[currentLanguage].title;
    document.body.appendChild(toggleBtn);

    // Gestion d'√©tat
    let tasks = JSON.parse(GM_getValue('kanbanTasks', '[]'));
    let dragTask = null;

    // Fonctionnalit√©s principales
    function initKanban() {
        // Chargement des t√¢ches
        tasks.forEach(task => createTaskElement(task));

        // Gestion du drag and drop
        setupDragAndDrop();

        // √âv√©nements
        document.querySelectorAll('.add-task-button').forEach(btn => {
            btn.addEventListener('click', showTaskForm);
        });

        document.getElementById('languageBtn').addEventListener('click', toggleLanguageMenu);
        document.querySelectorAll('.language-option').forEach(option => {
            option.addEventListener('click', changeLanguage);
        });

        document.getElementById('exportBtn').addEventListener('click', exportTasks);
        document.getElementById('importBtn').addEventListener('click', importTasks);

        document.querySelectorAll('.size-button').forEach(button => {
            button.addEventListener('click', changeSize);
        });

        toggleBtn.addEventListener('click', () => {
            isVisible = !isVisible;
            container.style.display = isVisible ? 'flex' : 'none';
            toggleBtn.textContent = isVisible ?
                `‚ñ≤ ${translations[currentLanguage].title}` :
                `‚ñº ${translations[currentLanguage].title}`;
        });

        // Fonctionnalit√© de d√©placement
        makeDraggable(container);
    }

    function createTaskElement(taskData) {
        const task = document.createElement('div');
        task.className = `kanban-task priority-${taskData.priority}`;
        task.draggable = true;
        task.innerHTML = `
            <div class="task-content">
                <div>${taskData.text}</div>
                <div class="task-priority">${translations[currentLanguage][taskData.priority]}</div>
            </div>
            <div class="delete-task">√ó</div>
        `;

        task.querySelector('.delete-task').addEventListener('click', () => {
            if (confirm(translations[currentLanguage].confirmDelete)) {
                task.remove();
                saveTasks();
            }
        });

        document.getElementById(taskData.column).appendChild(task);
        return task;
    }

    function showTaskForm(e) {
        const columnId = e.target.closest('.kanban-column').id;
        const form = document.createElement('div');
        form.className = 'task-form';
        form.innerHTML = `
            <input type="text" placeholder="${translations[currentLanguage].addTask}">
            <select>
                <option value="low">${translations[currentLanguage].low}</option>
                <option value="medium">${translations[currentLanguage].medium}</option>
                <option value="high">${translations[currentLanguage].high}</option>
            </select>
            <button class="save-btn">${translations[currentLanguage].save}</button>
            <button class="cancel-btn">${translations[currentLanguage].cancel}</button>
        `;

        form.querySelector('.save-btn').addEventListener('click', () => {
            const text = form.querySelector('input').value;
            const priority = form.querySelector('select').value;
            if (text) {
                const task = { text, priority, column: columnId };
                tasks.push(task);
                createTaskElement(task);
                saveTasks();
                form.remove();
            }
        });

        form.querySelector('.cancel-btn').addEventListener('click', () => form.remove());
        e.target.closest('.kanban-column').appendChild(form);
    }

    function setupDragAndDrop() {
        document.querySelectorAll('.kanban-task').forEach(task => {
            task.addEventListener('dragstart', () => {
                dragTask = task;
                task.classList.add('dragging');
            });

            task.addEventListener('dragend', () => {
                dragTask = null;
                task.classList.remove('dragging');
                saveTasks();
            });
        });

        document.querySelectorAll('.kanban-column').forEach(column => {
            column.addEventListener('dragover', e => {
                e.preventDefault();
                const afterElement = getDragAfterElement(column, e.clientY);
                const draggable = document.querySelector('.dragging');

                if (afterElement) {
                    column.insertBefore(draggable, afterElement);
                } else {
                    column.appendChild(draggable);
                }
            });

            column.addEventListener('drop', e => {
                e.preventDefault();
                const draggable = document.querySelector('.dragging');
                if (draggable) {
                    column.appendChild(draggable);
                    saveTasks(); // Sauvegarder les t√¢ches apr√®s le d√©placement
                }
            });
        });
    }

    function getDragAfterElement(column, y) {
        return [...column.querySelectorAll('.kanban-task:not(.dragging)')]
            .reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                return offset < 0 && offset > closest.offset ?
                    { offset: offset, element: child } : closest;
            }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    function saveTasks() {
        tasks = [];
        document.querySelectorAll('.kanban-column').forEach(column => {
            column.querySelectorAll('.kanban-task').forEach(task => {
                tasks.push({
                    text: task.querySelector('.task-content div').textContent,
                    priority: task.className.match(/priority-(low|medium|high)/)[1],
                    column: column.id
                });
            });
        });
        GM_setValue('kanbanTasks', JSON.stringify(tasks));
    }

    function exportTasks() {
        const data = JSON.stringify(tasks, null, 2);
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `kanban-${new Date().toISOString()}.json`;
        a.click();
    }

    function importTasks() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'application/json';
        input.addEventListener('change', e => {
            const file = e.target.files[0];
            const reader = new FileReader();
            reader.onload = () => {
                try {
                    const newTasks = JSON.parse(reader.result);
                    document.querySelectorAll('.kanban-task').forEach(t => t.remove());
                    newTasks.forEach(task => createTaskElement(task));
                    saveTasks();
                } catch {
                    alert(translations[currentLanguage].importError);
                }
            };
            reader.readAsText(file);
        });
        input.click();
    }

    function toggleLanguageMenu(e) {
        const menu = document.querySelector('.language-menu');
        menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        e.stopPropagation();
    }

    function changeLanguage(e) {
        currentLanguage = e.target.dataset.lang;
        document.querySelectorAll('.kanban-title').forEach(el => {
            el.textContent = translations[currentLanguage].title;
        });
        document.querySelectorAll('.kanban-column h3').forEach((el, index) => {
            const keys = ['todo', 'inProgress', 'done'];
            el.textContent = translations[currentLanguage][keys[index]];
        });
        document.querySelectorAll('.add-task-button').forEach(el => {
            el.innerHTML = `+ ${translations[currentLanguage].addTask}`;
        });
        document.getElementById('exportBtn').textContent = `‚Üì ${translations[currentLanguage].export}`;
        document.getElementById('importBtn').textContent = `‚Üë ${translations[currentLanguage].import}`;
        document.getElementById('languageBtn').textContent = `üåê ${translations[currentLanguage].language}`;
        toggleBtn.textContent = translations[currentLanguage].title;
        saveTasks();
        document.querySelector('.language-menu').style.display = 'none';
    }

    function changeSize(e) {
        const size = e.target.dataset.size;
        switch(size) {
            case 'small':
                container.style.width = '400px';
                break;
            case 'medium':
                container.style.width = '800px';
                break;
            case 'large':
                container.style.width = '1200px';
                break;
        }
    }

    function makeDraggable(element) {
        let offsetX, offsetY;

        element.addEventListener('mousedown', (e) => {
            offsetX = e.clientX - element.getBoundingClientRect().left;
            offsetY = e.clientY - element.getBoundingClientRect().top;
            document.addEventListener('mousemove', mouseMoveHandler);
            document.addEventListener('mouseup', mouseUpHandler);
        });

        function mouseMoveHandler(e) {
            element.style.left = `${e.clientX - offsetX}px`;
            element.style.top = `${e.clientY - offsetY}px`;
            element.style.position = 'absolute';
        }

        function mouseUpHandler() {
            document.removeEventListener('mousemove', mouseMoveHandler);
            document.removeEventListener('mouseup', mouseUpHandler);
        }
    }

    // Initialisation
    initKanban();
    document.addEventListener('click', () => {
        document.querySelector('.language-menu').style.display = 'none';
    });

    // Gestion responsive
    window.addEventListener('resize', () => {
        container.style.width = window.innerWidth < 768 ? '95vw' : '800px';
    });
})();
